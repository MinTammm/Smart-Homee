#include <Arduino.h>
#include <SoftwareSerial.h>
#include <EEPROM.h>

#define DIR_PIN 2
#define STEP_PIN 3
#define ENABLE_PIN 4

#define BUTTON_OPEN_PIN 5
#define BUTTON_CLOSE_PIN 6
#define BUTTON_STOP_PIN 7

SoftwareSerial SoftSerial(8, 9); // RX=8, TX=9
String uartBuffer = "";

const int MAX_STEPS = 6600;
const int MIN_STEPS = 0;
const int EEPROM_ADDR = 0;

volatile int currentSteps = 0;
volatile bool moving = false;
volatile bool directionOpen = true;

unsigned long lastStepMicros = 0;
const unsigned long stepIntervalMicros = 2500; // 2.5ms = 400 steps/s



// Debounce
unsigned long lastButtonOpenTime = 0;
unsigned long lastButtonCloseTime = 0;
unsigned long lastButtonStopTime = 0;
const unsigned long debounceDelay = 200;

//EEPROM
void saveStepsToEEPROM() {
  EEPROM.put(EEPROM_ADDR, currentSteps);
}

void loadStepsFromEEPROM() {
  EEPROM.get(EEPROM_ADDR, currentSteps);
  if (currentSteps < MIN_STEPS || currentSteps > MAX_STEPS) {
    currentSteps = 0;
  }
}


void handleCommand(String cmd) {
  cmd.trim();
  cmd.replace("[", "");
  cmd.replace("]", "");

  if (cmd == "OPEN") {
    Serial.println("Command OPEN received");
    directionOpen = true;
    moving = true;
    SoftSerial.println("ACK:OPEN");
  }
  else if (cmd == "CLOSE") {
    Serial.println("Command CLOSE received");
    directionOpen = false;
    moving = true;
    SoftSerial.println("ACK:CLOSE");
  }
  else if (cmd == "STOP") {
    Serial.println("Command STOP received");
    moving = false;
    SoftSerial.println("ACK:STOP");
  }
  else {
    Serial.println("Unknown command: " + cmd);
    SoftSerial.println("ERR:UNKNOWN_CMD");
  }
}


void setup() {
  Serial.begin(115200);
  SoftSerial.begin(115200);

  pinMode(DIR_PIN, OUTPUT);
  pinMode(STEP_PIN, OUTPUT);
  pinMode(ENABLE_PIN, OUTPUT);
  digitalWrite(ENABLE_PIN, LOW); // Bật driver

  pinMode(BUTTON_OPEN_PIN, INPUT_PULLUP);
  pinMode(BUTTON_CLOSE_PIN, INPUT_PULLUP);
  pinMode(BUTTON_STOP_PIN, INPUT_PULLUP);

  loadStepsFromEEPROM();

  SoftSerial.print("STEPS:");
  SoftSerial.println(currentSteps);
}

void loop() {
  // ===== Đọc nút nhấn =====
  if (digitalRead(BUTTON_OPEN_PIN) == LOW && millis() - lastButtonOpenTime > debounceDelay) {
    moving = true;
    directionOpen = true;
    lastButtonOpenTime = millis();
    SoftSerial.println("ACK:OPEN");
  }

  if (digitalRead(BUTTON_CLOSE_PIN) == LOW && millis() - lastButtonCloseTime > debounceDelay) {
    moving = true;
    directionOpen = false;
    lastButtonCloseTime = millis();
    SoftSerial.println("ACK:CLOSE");
  }

  if (digitalRead(BUTTON_STOP_PIN) == LOW && millis() - lastButtonStopTime > debounceDelay) {
    moving = false;
    lastButtonStopTime = millis();
    SoftSerial.println("ACK:STOP");
  }

  // ===== Nhận lệnh từ ESP32 =====
  while (SoftSerial.available()) {
  char c = SoftSerial.read();

  if (c == '\r') continue;  // bỏ qua \r
  else if (c == '\n') {
    if (uartBuffer.length() > 0) {
      String command = uartBuffer;
      uartBuffer = "";
      command.trim();  // loại bỏ khoảng trắng

      Serial.println("Received from ESP32: " + command);
      handleCommand(command);
    }
  } else {
    uartBuffer += c;

    // Ngăn lỗi nếu chuỗi quá dài (phòng buffer tràn)
    if (uartBuffer.length() > 64) uartBuffer = "";
  }
}


  // ===== Điều khiển stepper =====
  if (moving && micros() - lastStepMicros >= stepIntervalMicros) {
    lastStepMicros = micros();
    digitalWrite(DIR_PIN, directionOpen ? HIGH : LOW);

    if ((directionOpen && currentSteps >= MAX_STEPS) ||
        (!directionOpen && currentSteps <= MIN_STEPS)) {
      moving = false;
      SoftSerial.println("ACK:STOP");
      return;
    }

    digitalWrite(STEP_PIN, HIGH);
    delayMicroseconds(500);
    digitalWrite(STEP_PIN, LOW);

    currentSteps += directionOpen ? 1 : -1;


    SoftSerial.print("STEPS:");
    SoftSerial.println(currentSteps);

    static unsigned long lastSaveTime = 0;
    if (millis() - lastSaveTime > 5000) {
      saveStepsToEEPROM();
      lastSaveTime = millis();
    }
  }
}
